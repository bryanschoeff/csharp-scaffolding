using System.Data;
using System.Data.SqlClient;
using System.Configuration;
using System.ComponentModel.DataAnnotations;

namespace <%= ApplicationName %>.Models
{
  public class <%= object_name %>
  {
    public int ID { get; set; }
    <% @fields.each do |field| %>
<<<<<<< HEAD
    [Display(Name = "<%= field.display_name %>")]
=======
	[Display(Name = "<%= field.display_name %>")<%= ", DisplayFormat(ConvertEmptyStringToNull = false)" if field.csharp_type == "string" %>]
>>>>>>> 421509bb831d0c282df8e2b59bb13ac72049937d
    public <%= "#{field.csharp_type} #{field.csharp_name} { get; set; }"  %><% end %>

    public <%= object_name %>()
    {
      this.ID = -1;
    }

    public void Load(int ID)
    {
      using (SqlConnection connection = new SqlConnection(ConfigurationManager.ConnectionStrings["connection"].ConnectionString + ";initial catalog=<%= DatabaseName %>"))
      {
        SqlCommand command = new SqlCommand("<%= print_sql_sp_name_load %>", connection);
        SqlDataReader reader;
<<<<<<< HEAD

        command.CommandType = CommandType.StoredProcedure;
        command.Parameters.AddWithValue("@<%= object_name %>ID", ID);
=======
        
		command.CommandType = CommandType.StoredProcedure;
        command.Parameters.AddWithValue("@<%= id_name %>ID", ID);
>>>>>>> 421509bb831d0c282df8e2b59bb13ac72049937d

        connection.Open();
        reader = command.ExecuteReader();
        reader.Read();
        <% @fields.each do |field| %>
        this.<%= field.csharp_name %> = (<%= field.csharp_type %>)reader["<%= field.sql_column_name %>"];<% end %>
        this.ID = ID;
        connection.Close();
      }
    }

    public void Save()
    {
      if (this.ID == -1)
      {
        SaveNew();
      }
      else
      {
        Update();
      }
    }

    protected void SaveNew()
    {
      using (SqlConnection connection = new SqlConnection(ConfigurationManager.ConnectionStrings["connection"].ConnectionString + ";initial catalog=<%= DatabaseName %>"))
      {
        SqlCommand command = new SqlCommand("<%= print_sql_sp_name_save %>", connection);

        command.CommandType = CommandType.StoredProcedure;
        <% @fields.each do |field| %>
        command.Parameters.AddWithValue("<%= field.sql_parameter  %>", this.<%= field.csharp_name %>);<% end %>

        connection.Open();
        this.ID = System.Convert.ToInt32(command.ExecuteScalar());
        connection.Close();
      }
    }

    protected void Update()
    {
      using (SqlConnection connection = new SqlConnection(ConfigurationManager.ConnectionStrings["connection"].ConnectionString + ";initial catalog=<%= DatabaseName %>"))
      {
        SqlCommand command = new SqlCommand("<%= print_sql_sp_name_update %>", connection);

<<<<<<< HEAD
        command.CommandType = CommandType.StoredProcedure;
        command.Parameters.AddWithValue("@<%= object_name %>ID", this.ID);
=======
		command.CommandType = CommandType.StoredProcedure;
        command.Parameters.AddWithValue("@<%= id_name %>ID", this.ID);
>>>>>>> 421509bb831d0c282df8e2b59bb13ac72049937d
        <% @fields.each do |field| %>
        command.Parameters.AddWithValue("<%= field.sql_parameter  %>", this.<%= field.csharp_name %>);<% end %>

        connection.Open();
        command.ExecuteNonQuery();
        connection.Close();
      }
    }

    public void Delete()
    {
      using (SqlConnection connection = new SqlConnection(ConfigurationManager.ConnectionStrings["connection"].ConnectionString + ";initial catalog=<%= DatabaseName %>"))
      {
        SqlCommand command = new SqlCommand("<%= print_sql_sp_name_delete %>", connection);

<<<<<<< HEAD
        command.CommandType = CommandType.StoredProcedure;
        command.Parameters.AddWithValue("@<%= object_name %>ID", this.ID);
=======
		command.CommandType = CommandType.StoredProcedure;
        command.Parameters.AddWithValue("@<%= id_name %>ID", this.ID);
>>>>>>> 421509bb831d0c282df8e2b59bb13ac72049937d

        connection.Open();
        command.ExecuteNonQuery();
        connection.Close();
      }
    }
  }
}
