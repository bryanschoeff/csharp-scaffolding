using System.Data;
using System.Data.SqlClient;
using System.Configuration;
using System.ComponentModel.DataAnnotations;

namespace <%= ApplicationName %>.Models
{
  public class <%= object_name %>
  {
    public int ID { get; set; }
    <% @fields.each do |field| %>
        [Display(Name = "<%= field.display_name %>")<%= ", DisplayFormat(ConvertEmptyStringToNull = false)" if field.csharp_type == "string" %>]
        public <%= "#{field.csharp_type} #{field.csharp_name} { get; set; }"  %><% end %>

    public <%= object_name %>()
    {
      this.ID = -1;
    }

    public void Load(int ID)
    {
      using (SqlConnection connection = new SqlConnection(ConfigurationManager.ConnectionStrings["connection"].ConnectionString + ";initial catalog=<%= DatabaseName %>"))
      {
        SqlCommand command = new SqlCommand("<%= print_sql_sp_name_load %>", connection);
        SqlDataReader reader;

        command.CommandType = CommandType.StoredProcedure;
        command.Parameters.AddWithValue("@<%= id_name %>ID", ID);

        connection.Open();
        reader = command.ExecuteReader();
        reader.Read();
        <% @fields.each do |field| %>
            this.<%= field.csharp_name %> = (<%= field.csharp_type %>)reader["<%= field.sql_column_name %>"];<% end %>
        this.ID = (int)reader["<%= object_name %>ID"];
        connection.Close();
      }
    }

    public void Save()
    {
      if (this.ID == -1)
      {
        SaveNew();
      }
      else
      {
        Update();
      }
    }

    protected void SaveNew()
    {
      using (SqlConnection connection = new SqlConnection(ConfigurationManager.ConnectionStrings["connection"].ConnectionString + ";initial catalog=<%= DatabaseName %>"))
      {
        SqlCommand command = new SqlCommand("<%= print_sql_sp_name_save %>", connection);

        command.CommandType = CommandType.StoredProcedure;
        <% @fields.each do |field| %>
            command.Parameters.AddWithValue("<%= field.sql_parameter  %>", this.<%= field.csharp_name %>);<% end %>

        connection.Open();
        this.ID = System.Convert.ToInt32(command.ExecuteScalar());
        connection.Close();
      }
    }

    protected void Update()
    {
      using (SqlConnection connection = new SqlConnection(ConfigurationManager.ConnectionStrings["connection"].ConnectionString + ";initial catalog=<%= DatabaseName %>"))
      {
        SqlCommand command = new SqlCommand("<%= print_sql_sp_name_update %>", connection);

        command.CommandType = CommandType.StoredProcedure;
        command.Parameters.AddWithValue("@<%= id_name %>ID", this.ID);

        <% @fields.each do |field| %>
            command.Parameters.AddWithValue("<%= field.sql_parameter  %>", this.<%= field.csharp_name %>);<% end %>

        connection.Open();
        command.ExecuteNonQuery();
        connection.Close();
      }
    }

    public void Delete()
    {
      using (SqlConnection connection = new SqlConnection(ConfigurationManager.ConnectionStrings["connection"].ConnectionString + ";initial catalog=<%= DatabaseName %>"))
      {
        SqlCommand command = new SqlCommand("<%= print_sql_sp_name_delete %>", connection);

        command.CommandType = CommandType.StoredProcedure;
        command.Parameters.AddWithValue("@<%= id_name %>ID", this.ID);

        connection.Open();
        command.ExecuteNonQuery();
        connection.Close();
      }
    }

    public static Dictionary<int, <%= object_name %>> All()
    {
      Dictionary<int, <%= object_name %>> <%= object_name.pluralize.downcase %> = new Dictionary<int, <%= object_name %>>();

      using (SqlConnection connection = new SqlConnection(ConfigurationManager.ConnectionStrings["connection"].ConnectionString + ";initial catalog=<%= DatabaseName %>"))
      {
        SqlCommand command = new SqlCommand("<%= print_sql_sp_name_all %>", connection);
        SqlDataReader reader;

        command.CommandType = CommandType.StoredProcedure;

        connection.Open();
        reader = command.ExecuteReader();

        while (reader.Read())
        {
          <%= object_name %> <%= object_name.downcase %> = new <%= object_name %>();
          <% @fields.each do |field| %>
          <%= object_name.downcase %>.<%= field.csharp_name %> = (<%= field.csharp_type %>)reader["<%= field.sql_column_name %>"];<% end %>
          <%= object_name.downcase %>.ID = (int)reader["<%= object_name %>ID"];

          <%= object_name.pluralize.downcase %>.Add(<%= object_name.downcase %>.ID, <%= object_name.downcase %>);
        }
        connection.Close();

      }

      return <%= object_name.pluralize.downcase %>;
    }
  }

}
